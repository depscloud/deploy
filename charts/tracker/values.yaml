# Configuration shared across all charts. Each chart supports per service and
# global configuration, making it easy to configure and deploy the system.
global:
  # -- Common labels added to all resources.
  labels: {}

  service:
    # -- Configure the routing topology. Requires ServiceTopology feature gate and ClusterIP.
    topology: []
    #  - "kubernetes.io/hostname"
    #  - "topology.kubernetes.io/zone"
    #  - "topology.kubernetes.io/region"

  # Common metrics configuration.
  metrics:
    serviceMonitor:
      # -- Create a Prometheus ServiceMonitor.
      enabled: false
      # -- Configure the scrape interval used by the monitor.
      interval: 10s

# -- The number of instances to run.
replicaCount: 1

image:
  repository: img.pitz.tech/depscloud/tracker
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- Determine pods should automount the token.
  automountToken: false
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations for the pod.
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Configure the behavior of the service definition. In newer versions of
# kubernetes, you can leverage service topology to control routing.
service:
  # -- Configure the service type to use.
  type: Headless

  # -- Specify any annotations to add to the service.
  annotations: {}

  # -- Configure the routing topology. Requires ServiceTopology feature gate and ClusterIP.
  topology: []
  #  - "kubernetes.io/hostname"
  #  - "topology.kubernetes.io/zone"
  #  - "topology.kubernetes.io/region"

# -- Configure the resources allocated to the process.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 128Mi
  # requests:
  #   cpu: 50m
  #   memory: 32Mi

nodeSelector: {}

tolerations: []

affinity: {}

tls:
  # -- Configure mTLS for the gateway. The secret needs 3 keys: `tls.crt`,
  # `tls.key`, and `ca.crt`.
  secretName: ""

# Configure where data is stored by the tracker. The tracker process requires
# at least one of the two address strings. `address` is used to support write
# operations. When it's provided, the tracker operates in a read-write mode.
# `readOnlyAddress` is used to support read operations. When it's provided, the
# tracker operates in a read-only mode. When both are provided, we establish
# two connections. All writes will use `address` and all reads will use the
# `readOnlyAddress`.
storage:
  # -- The driver to use. (Available: sqlite, mysql, postgresql)
  driver: sqlite
  # -- The read-write connection string.
  address: file::memory:?cache=shared
  # -- The read-only connection string.
  readOnlyAddress:

# Pull the storage configuration from a secret file instead of passing inline.
# The secret file needs three keys: `STORAGE_DRIVER`, `STORAGE_ADDRESS`, and
# `STORAGE_READ_ONLY_ADDRESS`
externalStorage:
  configMapRef:
    # -- The name of the config map containing the storage connection information.
    name: ""
  secretRef:
    # -- The name of the secret containing the storage connection information.
    name: ""

# -- Labels added to all resources. These are joined with the global
# configuration for the deployment.
labels: {}

# Metrics configuration specific to the deployment. This overrides the
# global configuration for the deployment.
metrics:
  serviceMonitor:
    # -- Create a Prometheus ServiceMonitor.
    enabled: false
    # -- Configure the scrape interval used by the monitor.
    interval: 10s

  # Deploy and manage the grafana dashboard as configuration using the
  # grafana sidecar process (default in the kube-prometheus-stack).
  dashboard:
    # -- Enables the creation of the dashboard config map.
    enabled: false

    # -- Specify what namespace the config map should be deployed to.
    # This may differ from your application configuration. Defaults
    # to the namespace of the release.
    namespace: ""

    # Configuration specific to the sidecar process.
    sidecar:
      # -- The label used by the sidecar to select the dashboard.
      label: "grafana_dashboard"

autoscaling:
  # -- Enable autoscaling.
  enabled: false
  # -- The minimum number of replicas to maintain.
  minReplicas: 1
  # -- The maximum number of replicas allowed.
  maxReplicas: 5
  # -- The target CPU utilization threshold when autoscaling is triggered.
  targetCPUUtilizationPercentage: 80
  # autoscaling.targetMemoryUtilizationPercentage -- (int) The target memory utilization threshold when autoscaling is triggered.
  # targetMemoryUtilizationPercentage: 80
